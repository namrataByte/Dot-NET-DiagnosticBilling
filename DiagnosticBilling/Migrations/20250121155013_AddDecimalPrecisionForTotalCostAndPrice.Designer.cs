// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiagnosticBilling.Migrations
{
    [DbContext(typeof(DiagnosticBillingDbContext))]
    [Migration("20250121155013_AddDecimalPrecisionForTotalCostAndPrice")]
    partial class AddDecimalPrecisionForTotalCostAndPrice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiagnosticBilling.Models.Bill", b =>
                {
                    b.Property<int>("billId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("billId"));

                    b.Property<DateTime>("TodayDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.HasKey("billId");

                    b.HasIndex("doctorId");

                    b.HasIndex("patientId");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("DiagnosticBilling.Models.BillTest", b =>
                {
                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("BillId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("BillTests");
                });

            modelBuilder.Entity("DiagnosticBilling.Models.Doctor", b =>
                {
                    b.Property<int>("doctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("doctorId"));

                    b.Property<string>("doctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("doctorId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("DiagnosticBilling.Models.Patient", b =>
                {
                    b.Property<int>("patientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientId"));

                    b.Property<int>("patientAge")
                        .HasColumnType("int");

                    b.Property<string>("patientGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("patientId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("DiagnosticBilling.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("DiagnosticBilling.Models.Bill", b =>
                {
                    b.HasOne("DiagnosticBilling.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagnosticBilling.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DiagnosticBilling.Models.BillTest", b =>
                {
                    b.HasOne("DiagnosticBilling.Models.Bill", "Bill")
                        .WithMany("BillTests")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagnosticBilling.Models.Test", "Test")
                        .WithMany("BillTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("DiagnosticBilling.Models.Bill", b =>
                {
                    b.Navigation("BillTests");
                });

            modelBuilder.Entity("DiagnosticBilling.Models.Test", b =>
                {
                    b.Navigation("BillTests");
                });
#pragma warning restore 612, 618
        }
    }
}
